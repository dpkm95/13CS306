from Tkinter import *
from tkFileDialog import askopenfilename
import os
import main as semantic_analyzer

# Error message
errmsg = 'Error!'

# File to store the local symbol table
global_local_filename = "C:\\Users\\Aditya\\Desktop\\13CS306\\13CS306\\semantic_local_table.txt"

# File to store the output of the semantic analysis
global_output_filename = "C:\\Users\\Aditya\\Desktop\\13CS306\\13CS306\\semantic_analyzer_output.txt"

# File to store the global symbol table
global_symbol_filename = "C:\\Users\\Aditya\\Desktop\\13CS306\\13CS306\\semantic_symbol_table.txt"

# Python program containing the main program
file_name = "C:\\Users\\Aditya\\Desktop\\13CS306\\13CS306\\main.py"
f = open(file_name, 'r')

# File containing the C Program for semantic Analysis
name = None 

# Set up the tkinter UI
root = Tk()
root.title("Semantic Analyzer of C Program")
gframe = Frame(root,name = "semanticAnalysis")
gframe.grid(row = 0, column = 0 )
gtext = Text(gframe,height = "20", bd = "10")
gscroll = Scrollbar(gframe)
gscroll.pack(side=RIGHT, fill=Y)
gtext.pack(side=LEFT, fill=Y)
gscroll.config(command=gtext.yview)
gtext.config(yscrollcommand=gscroll.set)
gtext.pack(expand = True)

# Method to open the C Program for semantic Analysis
def openCProgram():
    global name
    name = askopenfilename() # C Program

# Method starts the Semantic Analysis of C Program by calling the main module	
def StartSemanticAnalysis(): 
	global name
	print('The name inside script method is', name)
	gtext.delete(1.0, END)
	if name is None:
		gtext.insert(END, "Please enter the C file for reading first")
	else:
		gtext.delete(1.0, END)
		# Runs the semantic Analysis of the main module
		semantic_analyzer.called_main(name)
		f_open = open(global_output_filename, 'r')
		readOutput = f_open.read()
		for line in readOutput:
			gtext.insert(END, line)
		f_open.close()

# Method displays the C Program
def displayCProgram():
    gtext.delete(1.0, END)
    if name is None:
        gtext.insert(END, "Please provide the file path for C Program first")
    f = open(name,'r')
    quote = f.read()
    gtext.insert(END, quote)
    f.seek(0,0)
    f1 = open("test",'w')
    for line in f:
        f1.writelines(line)
    f.close()
    f1.close()

# Method displays the Symbol Table generated by the Semantic Analyzer
def symbolTableDisplay():
	gtext.delete(1.0, END)
	if name is None:
		print("Please enter the file for reading the C Program")
		gtext.insert(END, "Please enter the file for reading the C Program first")
	else:
		f_symbol = open(global_symbol_filename, 'r')
		f_read_all = f_symbol.read()
		for line in f_read_all:
			gtext.insert(END, line)
		f_symbol.close()
	
# Method displays the Python Program
def displayPythonProgram():
	gtext.delete(1.0, END)
	f = open(file_name, 'r')
	quote= f.read()
	gtext.insert(END, quote)
	f.seek(0, 0)
	f2 = open("open", 'w')
	for line in f:
		f2.writelines(line)
	f.close()
	f2.close() # Display the string
	
# Method displays the local symbol table
def showLocalTable():
	gtext.delete(1.0, END)
	if name is None:
		gtext.insert(END, "Please choose the C Program first to run Semantic Analysis")
	else:
		f_local = open(global_local_filename, 'r')
		f_l_read_all = f_local.read()
		for line in f_l_read_all:
			gtext.insert(END, line)	
		f_local.close()

# Creates the frame to support the buttons on the screen
bframe = Frame(root)
# Aligns the frame adjacent to the text dialog
bframe.grid(row = 0, column = 1)

# Button to display the Python Program (Semantic Analyzer, loads the Main module)
PythonProgramButton = Button(bframe, width="50", text = "Display the Python Program", command = displayPythonProgram)
PythonProgramButton.pack(fill=X)
PythonProgramButton.grid(row=0, column=0)

# Button for reading the C Program
CProgramButton = Button(bframe, width = "50",text = 'Open the File for Reading', command=openCProgram)
CProgramButton.grid(row=1,column=0)

# Button for displaying the C Program
ShowCProgram = Button(bframe, width = "50", text = "Display the C Program",command=displayCProgram)
ShowCProgram.grid(row=2,column=0)

# Button to run the Semantic Analyzer
StartAnalysisButton = Button(bframe, width = "50" , text = "Run Semantic Analyzer", command= StartSemanticAnalysis)
StartAnalysisButton.grid(row = 3, column = 0)

# Button to print the Symbol Table
SymbolTableButton = Button(bframe, width = "50", text = "Display global symbol table", command = symbolTableDisplay)
SymbolTableButton.grid(row = 4, column = 0)

# Button to print the local Symobl Table
LocalTableButton = Button(bframe, width = "50", text = "Display local symbol table", command = showLocalTable)
LocalTableButton.grid(row = 5, column = 0) 

# Button to exit the GUI
exitButton = Button(bframe, width = "50" , text ="EXIT", command=root.destroy)
exitButton.grid(row = 6, column = 0)

# Starts the execution for the UI Program
root.mainloop()